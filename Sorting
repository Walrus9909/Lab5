/******************************************************************************
 *  Compilation:  javac Sorting.java
 *  Execution:    java Sorting input.txt AlgorithmUsed
 *  Dependencies: StdOut.java In.java Stopwatch.java
 *  Data files:   http://algs4.cs.princeton.edu/14analysis/1Kints.txt
 *                http://algs4.cs.princeton.edu/14analysis/2Kints.txt
 *                http://algs4.cs.princeton.edu/14analysis/4Kints.txt
 *                http://algs4.cs.princeton.edu/14analysis/8Kints.txt
 *                http://algs4.cs.princeton.edu/14analysis/16Kints.txt
 *                http://algs4.cs.princeton.edu/14analysis/32Kints.txt
 *                http://algs4.cs.princeton.edu/14analysis/1Mints.txt
 *
 *  A program to play with various sorting algorithms. 
 *
 *
 *  Example run:
 *  % java Sorting 2Kints.txt  2
 *
 ******************************************************************************/
import java.io.IOException;
import java.io.RandomAccessFile;
import java.lang.reflect.Array;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;

public class Sorting {

	/**
	 * 
	 * Sorts the numbers present in the file based on the algorithm provided. 0 =
	 * Arrays.sort() (Java Default) 1 = Bubble Sort 2 = Selection Sort 3 = Insertion
	 * Sort 4 = Mergesort 5 = Quicksort
	 *
	 * @param args the command-line arguments
	 */
	public static void main(String[] args) {
		In in = new In(args[0]);

		// Storing file input in an array
		int[] a = in.readAllInts();
		int[] b = preSort(a);
		int[] c = reverse(b);
		int[] d = almostSort(b);

		// TODO:
		// Read the second argument and based on input select the sorting algorithm
		// * 0 = Arrays.sort() (Java Default)
		// * 1 = Bubble Sort
		// * 2 = Selection Sort
		// * 3 = Insertion Sort
		// * 4 = Mergesort
		// * 5 = Quicksort
		// Perform sorting on a,b,c,d. Pring runtime for each case along with timestamp
		// and record those.
		// For runtime and priting, you can use the same code from Lab 4 as follows:

		Stopwatch timer = new Stopwatch();
		int[][] traverse = new int[][] {a,b,c,d};
		String[] arrayNames = new String[] {"a","b","c","d"};
		String arrayUsed = null;
		double time = timer.elapsedTimeMillis();
		String fileName = args[0];
		int sortChoice = Integer.parseInt(args[1]);
		String sortType = null;

		switch (sortChoice) {
		case 0:
			sortType = "Java Default";
			for (int i = 0; i < 4; i++) {
				arrayUsed = arrayNames[i];
				javaDefault(traverse[i]);
				Results(sortType, time, arrayUsed, fileName);
			}
			break;
		case 1:
			sortType = "Bubble Sort";

			break;
		case 2:
			sortType = "Selection Sort";

			break;
		case 3:
			sortType = "Insertion Sort";

			break;
		case 4:
			sortType = "Merge Sort";

			break;
		case 5:
			sortType = "Quick Sort";

			break;

		}

		

	}

	public static int[] preSort(int[] array) {
		Arrays.sort(array);
		return array;
	}

	public static int[] reverse(int[] array) {

		int counter = 0;
		int[] reversed = new int[array.length];
		for (int i = (array.length - 1); i >= 0; i--) {
			reversed[counter] = array[i];
			counter++;
		}
		return reversed;

	}

	public static int[] almostSort(int[] array) {

		double unsortDouble = (0.1 * array.length);
		int unsorts = (int) Math.round(unsortDouble);
		int[] unsorted = new int[array.length];
		for (int i = 0; i < array.length; i++) {
			unsorted[i] = array[i];
		}
		for (int i = 0; i <= unsorts; i++) {
			unsorted[(2 * i)] = array[(2 * i) + 1];
			unsorted[(2 * i) + 1] = array[2 * i];
		}
		return unsorted;
	}

	public static void createFile(String newFile) {

		try {
			RandomAccessFile raf = new RandomAccessFile(newFile, "rw");

		} catch (IOException ex) {
			ex.printStackTrace();
		}
	}
	
	public static void javaDefault(int[] array) {
		Arrays.sort(array);
	}
	
	public static void Results(String sortType, double time, String arrayUsed, String fileName) {
		// TODO: For each array, a, b, c, d:
				// TODO: Perform Sorting and store the result in an array

				String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(Calendar.getInstance().getTime());
				String netID = "wwilli17";
				String algorithmUsed = sortType;
				// TODO: Replace with the array used
				StdOut.printf("%s %s %8.1f   %s  %s  %s\n", algorithmUsed, arrayUsed, time, timeStamp, netID, fileName);
				// Write the resultant array to a file (Each time you run a program 4 output
				// files should be generated. (one for each a,b,c, and d)
	}

}
