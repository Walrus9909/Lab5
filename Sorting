/******************************************************************************
 *  Compilation:  javac Sorting.java
 *  Execution:    java Sorting input.txt AlgorithmUsed
 *  Dependencies: StdOut.java In.java Stopwatch.java
 *  Data files:   http://algs4.cs.princeton.edu/14analysis/1Kints.txt
 *                http://algs4.cs.princeton.edu/14analysis/2Kints.txt
 *                http://algs4.cs.princeton.edu/14analysis/4Kints.txt
 *                http://algs4.cs.princeton.edu/14analysis/8Kints.txt
 *                http://algs4.cs.princeton.edu/14analysis/16Kints.txt
 *                http://algs4.cs.princeton.edu/14analysis/32Kints.txt
 *                http://algs4.cs.princeton.edu/14analysis/1Mints.txt
 *
 *  A program to play with various sorting algorithms. 
 *
 *
 *  Example run:
 *  % java Sorting 2Kints.txt  2
 *
 ******************************************************************************/
import java.io.IOException;
import java.io.RandomAccessFile;
import java.lang.reflect.Array;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;

public class Sorting {

	public static void main(String[] args) {
		
		//the following checks to make sure that the original text file exists
		In in = null;
		try {
			in = new In(args[0]);
		} catch(IllegalArgumentException i) {
			System.out.println("File does not exist");
			System.exit(0);
		}
		

		// The 4 input arrays are created below
		int[] a = in.readAllInts();
		int[] b = preSort(a);
		int[] c = reverse(b);
		int[] d = almostSort(b);

		int[][] traverse = new int[][] { a, b, c, d };
		String[] arrayNames = new String[] { "a", "b", "c", "d" };
		String arrayUsed = null;
		String fileName = args[0];
		int sortChoice = Integer.parseInt(args[1]);
		String sortType = null;

		switch (sortChoice) {
		case 0:
			sortType = "Java Default";
			for (int i = 0; i < 4; i++) {
				arrayUsed = arrayNames[i];
				Stopwatch timer = new Stopwatch();
				javaDefault(traverse[i]);
				double time = timer.elapsedTimeMillis();
				createFile(arrayUsed, traverse[i]);
				results(sortType, time, arrayUsed, fileName);
			}
			break;
		case 1:
			sortType = "Bubble Sort";
			for (int i = 0; i < 4; i++) {
				arrayUsed = arrayNames[i];
				Stopwatch timer = new Stopwatch();
				bubbleSort(traverse[i]);
				double time = timer.elapsedTimeMillis();
				createFile(arrayUsed, traverse[i]);
				results(sortType, time, arrayUsed, fileName);
			}
			break;
		case 2:
			sortType = "Selection Sort";
			for (int i = 0; i < 4; i++) {
				arrayUsed = arrayNames[i];
				Stopwatch timer = new Stopwatch();
				selectionSort(traverse[i]);
				double time = timer.elapsedTimeMillis();
				createFile(arrayUsed , traverse[i]);
				results(sortType, time, arrayUsed, fileName);
			}
			break;
		case 3:
			sortType = "Insertion Sort";
			for (int i = 0; i < 4; i++) {
				arrayUsed = arrayNames[i];
				Stopwatch timer = new Stopwatch();
				insertionSort(traverse[i]);
				double time = timer.elapsedTimeMillis();
				createFile(arrayUsed, traverse[i]);
				results(sortType, time, arrayUsed, fileName);
			}
			break;
		case 4:
			sortType = "Merge Sort";
			for (int i = 0; i < 4; i++) {
				arrayUsed = arrayNames[i];
				Stopwatch timer = new Stopwatch();
				int low = 0;
				int high = traverse.length - 1;
				mergeSort(traverse[i], low, high);
				double time = timer.elapsedTimeMillis();
				createFile(arrayUsed, traverse[i]);
				results(sortType, time, arrayUsed, fileName);
			}

			break;
		case 5:
			sortType = "Quick Sort";
			for (int i = 0; i < 4; i++) {
				arrayUsed = arrayNames[i];
				Stopwatch timer = new Stopwatch();
				int low = 0;
				int high = traverse.length - 1;
				quickSort(traverse[i], low, high);
				double time = timer.elapsedTimeMillis();
				createFile(arrayUsed, traverse[i]);
				results(sortType, time, arrayUsed, fileName);
			}
			break;

		}

	}

	// the following method sorts the original array just using the Java Default
	// Method
	public static int[] preSort(int[] array) {
		Arrays.sort(array);
		return array;
	}

	// the following method takes the sorted array and reverses the order
	public static int[] reverse(int[] array) {

		int counter = 0;
		int[] reversed = new int[array.length];
		for (int i = (array.length - 1); i >= 0; i--) {
			reversed[counter] = array[i];
			counter++;
		}
		return reversed;

	}

	// the following method takes the sorted array and makes enough swaps to meet
	// the requirements of an almost sorted array
	public static int[] almostSort(int[] array) {

		double unsortDouble = (0.1 * array.length);
		int unsorts = (int) Math.round(unsortDouble);
		int[] unsorted = new int[array.length];
		for (int i = 0; i < array.length; i++) {
			unsorted[i] = array[i];
		}
		for (int i = 0; i <= unsorts; i++) {
			unsorted[(2 * i)] = array[(2 * i) + 1];
			unsorted[(2 * i) + 1] = array[2 * i];
		}
		return unsorted;
	}

	// the following array creates a text file and takes the sorted array as an
	// input
	public static void createFile(String newFile, int[] array) {
		String arrayPrint = Arrays.toString(array);
		try {
			RandomAccessFile raf = new RandomAccessFile((newFile + ".txt"), "rw");
			raf.writeChars(arrayPrint);
		} catch (IOException ex) {
			ex.printStackTrace();
		}

	}

	// the following method uses the javaDefault method to sort the given array
	public static void javaDefault(int[] array) {
		Arrays.sort(array);
	}

	// the following method takes in the various input factors
	public static void results(String sortType, double time, String arrayUsed, String fileName) {
		// TODO: For each array, a, b, c, d:
		// TODO: Perform Sorting and store the result in an array

		String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(Calendar.getInstance().getTime());
		String netID = "wwilli17";
		String algorithmUsed = sortType;
		// TODO: Replace with the array used
		StdOut.printf("%s %s %8.1f   %s  %s  %s\n", algorithmUsed, arrayUsed, time, timeStamp, netID, fileName);
		// Write the resultant array to a file (Each time you run a program 4 output
		// files should be generated. (one for each a,b,c, and d)
	}

	// the following method uses bubble sort to sort the given array
	public static void bubbleSort(int array[]) {
		int length = array.length;
		for (int i = 0; i < length - 1; i++)
			for (int k = 0; k < length - i - 1; k++)
				if (array[k] > array[k + 1]) {
					int temp = array[k];
					array[k] = array[k + 1];
					array[k + 1] = temp;
				}
	}

	// the following method uses insertion sort to sort the given array
	public static void insertionSort(int array[]) {
		int n = array.length;
		for (int i = 1; i < n; ++i) {
			int key = array[i];
			int j = i - 1;
			while (j >= 0 && array[j] > key) {
				array[j + 1] = array[j];
				j = j - 1;
			}
			array[j + 1] = key;
		}
	}

	// the following method uses selection sort to sort the given array
	public static void selectionSort(int array[]) {
		int n = array.length;
		for (int i = 0; i < n - 1; i++) {
			int min_idx = i;
			for (int j = i + 1; j < n; j++)
				if (array[j] < array[min_idx])
					min_idx = j;
			int temp = array[min_idx];
			array[min_idx] = array[i];
			array[i] = temp;
		}

	}

	//the following method is used as a part of mergeSort() for sorting
	static void merge(int arr[], int l, int m, int r) {
		// Find sizes of two subarrays to be merged
		int n1 = m - l + 1;
		int n2 = r - m;

		/* Create temp arrays */
		int L[] = new int[n1];
		int R[] = new int[n2];

		/* Copy data to temp arrays */
		for (int i = 0; i < n1; ++i)
			L[i] = arr[l + i];
		for (int j = 0; j < n2; ++j)
			R[j] = arr[m + 1 + j];

		/* Merge the temp arrays */

		// Initial indexes of first and second subarrays
		int i = 0, j = 0;

		// Initial index of merged subarry array
		int k = l;
		while (i < n1 && j < n2) {
			if (L[i] <= R[j]) {
				arr[k] = L[i];
				i++;
			} else {
				arr[k] = R[j];
				j++;
			}
			k++;
		}

		/* Copy remaining elements of L[] if any */
		while (i < n1) {
			arr[k] = L[i];
			i++;
			k++;
		}

		/* Copy remaining elements of R[] if any */
		while (j < n2) {
			arr[k] = R[j];
			j++;
			k++;
		}
	}

	// the following method is used to sort arrays using the merge sort algorithm
	// the code for quicksort and quickSortPartition() was obtained from
	// GeeksforGeeks
	// the contributer of the code to the website is Rajat Mishra
	public static void mergeSort(int arr[], int l, int r) {
		if (l < r) {
			// Find the middle point
			int m = (l + r) / 2;

			// Sort first and second halves
			mergeSort(arr, l, m);
			mergeSort(arr, m + 1, r);

			// Merge the sorted halves
			merge(arr, l, m, r);
		}

	}

	// the following method is used as a part of quicksort() for sorting
	public static int quickSortPartition(int arr[], int low, int high) {
		int pivot = arr[high];
		int i = (low - 1); // index of smaller element
		for (int j = low; j < high; j++) {
			// If current element is smaller than or
			// equal to pivot
			if (arr[j] <= pivot) {
				i++;

				// swap arr[i] and arr[j]
				int temp = arr[i];
				arr[i] = arr[j];
				arr[j] = temp;
			}
		}

		// swap arr[i+1] and arr[high] (or pivot)
		int temp = arr[i + 1];
		arr[i + 1] = arr[high];
		arr[high] = temp;

		return i + 1;
	}

	// the following array sorts the given array using quicksort
	// the code for quicksort and quickSortPartition() was obtained from
	// GeeksforGeeks
	// the contributer of the code to the website is Rajat Mishra
	public static void quickSort(int arr[], int low, int high) {

		if (low < high) {
			/*
			 * pi is partitioning index, arr[pi] is now at right place
			 */
			int pi = quickSortPartition(arr, low, high);

			// Recursively sort elements before
			// partition and after partition
			quickSort(arr, low, pi - 1);
			quickSort(arr, pi + 1, high);
		}

	}
}
